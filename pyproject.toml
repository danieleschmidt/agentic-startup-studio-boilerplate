[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-startup-studio-boilerplate"
version = "0.2.0"
description = "A Cookiecutter template for rapidly building agentic startups with CrewAI, FastAPI, and React"
readme = "README.md"
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
license = {text = "Apache-2.0"}
keywords = ["agentic", "startup", "template", "cookiecutter", "crewai", "fastapi", "react", "automation", "ai", "boilerplate"]
dependencies = [
    "cookiecutter>=2.5.0",
    "fastapi>=0.108.0",
    "uvicorn[standard]>=0.25.0",
    "crewai>=0.14.0",
    "pydantic>=2.5.0",
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "black>=23.12.1",
    "flake8>=7.0.0",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "pdoc>=14.3.0",
]
test = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
]

[project.urls]
Homepage = "https://github.com/danieleschmidt/agentic-startup-studio-boilerplate"
Documentation = "https://github.com/danieleschmidt/agentic-startup-studio-boilerplate#readme"
Repository = "https://github.com/danieleschmidt/agentic-startup-studio-boilerplate.git"
Issues = "https://github.com/danieleschmidt/agentic-startup-studio-boilerplate/issues"
Changelog = "https://github.com/danieleschmidt/agentic-startup-studio-boilerplate/blob/main/CHANGELOG.md"

[project.scripts]
agentic-studio = "agentic_startup_studio.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agentic_startup_studio*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"agentic_startup_studio" = ["templates/**/*", "static/**/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | alembic/versions
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agentic_startup_studio", "app", "tests"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "crewai"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/alembic/versions/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "cookiecutter.*",
    "uvicorn.*",
    "gunicorn.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=agentic_startup_studio",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
env = [
    "TESTING=true",
    "DATABASE_URL=sqlite:///./test.db",
    "REDIS_URL=redis://localhost:6379/1",
]

# Coverage configuration
[tool.coverage.run]
source = ["agentic_startup_studio"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/alembic/versions/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic/versions"]
skips = ["B101", "B601"]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "package.json:version",
    "agentic_startup_studio/__init__.py:__version__",
]

# Semantic release configuration
[tool.semantic_release]
version_variable = "agentic_startup_studio/__init__.py:__version__"
version_toml = "pyproject.toml:project.version"
version_pattern = "package.json:version"
build_command = "pip install build && python -m build"
upload_to_pypi = false
upload_to_release = true
commit_subject = "chore(release): {version} [skip ci]"
commit_message = "chore(release): {version} [skip ci]\n\n{changelog}"

# Ruff configuration (alternative to flake8)
[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = [
    "B",   # Don't auto-fix bugbear issues
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "alembic/versions",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["agentic_startup_studio", "app", "tests"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG", "S101"]
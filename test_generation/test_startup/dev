#!/bin/bash

# Test Startup Development Script
# Provides easy commands for development workflow

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker is not running. Please start Docker and try again."
        exit 1
    fi
}

# Check if required files exist
check_requirements() {
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "docker-compose.yml not found. Are you in the project root?"
        exit 1
    fi
    
    if [[ ! -f ".env.example" ]]; then
        log_warning ".env.example not found. Creating default environment file..."
        create_env_file
    fi
    
    if [[ ! -f ".env" ]]; then
        log_info "Copying .env.example to .env"
        cp .env.example .env
        log_warning "Please update .env with your configuration"
    fi
}

# Create default .env file
create_env_file() {
    cat > .env.example << EOF
# Test Startup Environment Configuration

# Application
ENVIRONMENT=development
DEBUG=true
SECRET_KEY=your-secret-key-change-in-production

# Database
DATABASE_URL=postgresql://test_startup_user:test_startup_password@postgres:5432/test_startup_db

# Redis
REDIS_URL=redis://redis:6379

# AI Services (required for CrewAI)
OPENAI_API_KEY=your-openai-api-key
ANTHROPIC_API_KEY=your-anthropic-api-key

# Email (for development)
EMAIL_BACKEND=console
SMTP_HOST=mailhog
SMTP_PORT=1025

# Frontend
REACT_APP_API_URL=http://localhost:8000/api/v1
REACT_APP_ENVIRONMENT=development
EOF
}

# Start all services
start_services() {
    log_info "Starting Test Startup development environment..."
    check_docker
    check_requirements
    
    # Build and start services
    docker-compose up --build -d
    
    log_success "Development environment started successfully!"
    log_info "Services available at:"
    echo "  Frontend: http://localhost:3000"
    echo "  Backend API: http://localhost:8000"
    echo "  API Docs: http://localhost:8000/docs"
    echo "  Database: localhost:5432"
    echo "  Redis: localhost:6379"
    
    # Wait for services to be ready
    log_info "Waiting for services to be ready..."
    sleep 10
    
    # Check service health
    check_service_health
}

# Stop all services
stop_services() {
    log_info "Stopping Test Startup development environment..."
    docker-compose down
    log_success "Development environment stopped"
}

# Restart all services
restart_services() {
    log_info "Restarting Test Startup development environment..."
    stop_services
    start_services
}

# Show service logs
show_logs() {
    local service=${1:-""}
    if [[ -n "$service" ]]; then
        log_info "Showing logs for $service..."
        docker-compose logs -f "$service"
    else
        log_info "Showing logs for all services..."
        docker-compose logs -f
    fi
}

# Check service health
check_service_health() {
    log_info "Checking service health..."
    
    # Check backend health
    if curl -s http://localhost:8000/health > /dev/null; then
        log_success "Backend service is healthy"
    else
        log_warning "Backend service is not responding"
    fi
    
    # Check frontend
    if curl -s http://localhost:3000 > /dev/null; then
        log_success "Frontend service is healthy"
    else
        log_warning "Frontend service is not responding"
    fi
    
    # Check database
    if docker-compose exec -T postgres pg_isready > /dev/null 2>&1; then
        log_success "Database is ready"
    else
        log_warning "Database is not ready"
    fi
}

# Run database migrations
run_migrations() {
    log_info "Running database migrations..."
    docker-compose exec backend alembic upgrade head
    log_success "Database migrations completed"
}

# Seed database with sample data
seed_database() {
    log_info "Seeding database with sample data..."
    docker-compose exec backend python -m app.scripts.seed_data
    log_success "Database seeded successfully"
}

# Run tests
run_tests() {
    local test_type=${1:-"all"}
    
    case $test_type in
        "backend")
            log_info "Running backend tests..."
            docker-compose exec backend pytest
            ;;
        "frontend")
            log_info "Running frontend tests..."
            docker-compose exec frontend npm test
            ;;
        "e2e")
            log_info "Running end-to-end tests..."
            docker-compose exec frontend npm run test:e2e
            ;;
        *)
            log_info "Running all tests..."
            docker-compose exec backend pytest
            docker-compose exec frontend npm test -- --watchAll=false
            ;;
    esac
}

# Format code
format_code() {
    log_info "Formatting code..."
    
    # Format backend code
    docker-compose exec backend black .
    docker-compose exec backend isort .
    
    # Format frontend code
    docker-compose exec frontend npm run format
    
    log_success "Code formatting completed"
}

# Lint code
lint_code() {
    log_info "Linting code..."
    
    # Lint backend code
    docker-compose exec backend flake8 .
    docker-compose exec backend mypy .
    
    # Lint frontend code
    docker-compose exec frontend npm run lint
    
    log_success "Code linting completed"
}

# Build for production
build_production() {
    log_info "Building production images..."
    docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
    log_success "Production build completed"
}

# Clean up containers and volumes
cleanup() {
    log_info "Cleaning up containers and volumes..."
    docker-compose down -v --remove-orphans
    docker system prune -f
    log_success "Cleanup completed"
}

# Show usage information
show_usage() {
    cat << EOF
Test Startup Development Script

Usage: ./dev <command> [options]

Commands:
    up, start           Start the development environment
    down, stop          Stop the development environment
    restart             Restart the development environment
    logs [service]      Show logs (optionally for specific service)
    health              Check service health status
    migrate             Run database migrations
    seed                Seed database with sample data
    test [type]         Run tests (backend|frontend|e2e|all)
    format              Format code using black, isort, prettier
    lint                Lint code using flake8, mypy, eslint
    build               Build production images
    clean               Clean up containers and volumes
    help                Show this help message

Examples:
    ./dev up                    # Start all services
    ./dev logs backend          # Show backend logs
    ./dev test backend          # Run backend tests only
    ./dev format                # Format all code

Environment:
    Copy .env.example to .env and configure your settings before starting.

Services:
    Frontend:    http://localhost:3000
    Backend:     http://localhost:8000
    API Docs:    http://localhost:8000/docs
    Database:    localhost:5432
    Redis:       localhost:6379
    MailHog:     http://localhost:8025 (development profile)
    PgAdmin:     http://localhost:5050 (development profile)

EOF
}

# Main command dispatcher
main() {
    case "${1:-help}" in
        "up"|"start")
            start_services
            ;;
        "down"|"stop")
            stop_services
            ;;
        "restart")
            restart_services
            ;;
        "logs")
            show_logs "$2"
            ;;
        "health")
            check_service_health
            ;;
        "migrate")
            run_migrations
            ;;
        "seed")
            seed_database
            ;;
        "test")
            run_tests "$2"
            ;;
        "format")
            format_code
            ;;
        "lint")
            lint_code
            ;;
        "build")
            build_production
            ;;
        "clean")
            cleanup
            ;;
        "help"|*)
            show_usage
            ;;
    esac
}

# Run main function with all arguments
main "$@"
# Development Docker Compose configuration
# Use this for local development with hot-reload and debugging

version: '3.8'

services:
  # =============================================================================
  # Development Container (DevContainer support)
  # =============================================================================
  devcontainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_ENV: development
    container_name: agentic-startup-devcontainer
    ports:
      - "8000:8000"  # FastAPI
      - "3000:3000"  # React dev server
      - "8080:8080"  # Keycloak
      - "5432:5432"  # PostgreSQL
      - "6379:6379"  # Redis
      - "8081:8081"  # Adminer
      - "9090:9090"  # Prometheus
      - "3001:3000"  # Grafana
      - "5678:5678"  # Python debugger
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentic_startup_dev
      - REDIS_URL=redis://redis:6379/0
      - RUN_MIGRATIONS=true
      - PYTHONPATH=/workspace
    volumes:
      - .:/workspace:cached
      - /workspace/node_modules
      - dev_uploads:/workspace/uploads
      - dev_logs:/workspace/logs
      - /var/run/docker.sock:/var/run/docker-host.sock
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    working_dir: /workspace
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    stdin_open: true
    tty: true

  # =============================================================================
  # Web Application (Development)
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_ENV: development
    container_name: agentic-startup-app-dev
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentic_startup_dev
      - REDIS_URL=redis://redis:6379/0
      - RUN_MIGRATIONS=true
      - PYTHONPATH=/app
    volumes:
      - .:/app:cached
      - dev_uploads:/app/uploads
      - dev_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # Frontend Development Server
  # =============================================================================
  frontend:
    image: node:18-alpine
    container_name: agentic-startup-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_KEYCLOAK_URL=http://localhost:8080
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app:cached
      - frontend_node_modules:/app/node_modules
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    networks:
      - dev-network
    depends_on:
      - app

  # =============================================================================
  # Database (Development)
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: agentic-startup-db-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: agentic_startup_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agentic_startup_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Redis (Development)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: agentic-startup-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - dev_redis_data:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # Database Administration (Adminer)
  # =============================================================================
  adminer:
    image: adminer:4.8.1
    container_name: agentic-startup-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: dracula
    networks:
      - dev-network
    depends_on:
      - db

  # =============================================================================
  # Authentication (Keycloak)
  # =============================================================================
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: agentic-startup-keycloak-dev
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/keycloak_dev
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    command: start-dev
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes
      - ./keycloak/import:/opt/keycloak/data/import
    networks:
      - dev-network
    depends_on:
      db:
        condition: service_healthy

  # =============================================================================
  # Background Workers (Development)
  # =============================================================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: agentic-startup-worker-dev
    command: celery -A main.celery worker --loglevel=debug --concurrency=1
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentic_startup_dev
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app:cached
      - dev_uploads:/app/uploads
      - dev_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network

  # =============================================================================
  # Task Scheduler (Development)
  # =============================================================================
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: agentic-startup-scheduler-dev
    command: celery -A main.celery beat --loglevel=debug
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentic_startup_dev
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app:cached
      - dev_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network

  # =============================================================================
  # Monitoring - Prometheus (Development)
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: agentic-startup-prometheus-dev
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - dev_prometheus_data:/prometheus
    networks:
      - dev-network

  # =============================================================================
  # Monitoring - Grafana (Development)
  # =============================================================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: agentic-startup-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - dev_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    networks:
      - dev-network
    depends_on:
      - prometheus

  # =============================================================================
  # Testing Container
  # =============================================================================
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: agentic-startup-test
    environment:
      - ENVIRONMENT=testing
      - TESTING=true
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/agentic_startup_test
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - .:/app:cached
      - test_coverage:/app/htmlcov
      - test_results:/app/test-results
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    profiles:
      - testing
    command: python -m pytest --cov=. --cov-report=html --cov-report=term -v

  # =============================================================================
  # Documentation Server
  # =============================================================================
  docs:
    image: python:3.11-slim
    container_name: agentic-startup-docs
    ports:
      - "8082:8000"
    volumes:
      - ./docs:/docs:ro
    working_dir: /docs
    command: python -m http.server 8000
    networks:
      - dev-network
    profiles:
      - docs

# =============================================================================
# Networks
# =============================================================================
networks:
  dev-network:
    driver: bridge
    name: agentic-startup-dev-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  dev_postgres_data:
    driver: local
    name: agentic-startup-dev-postgres-data
  dev_redis_data:
    driver: local
    name: agentic-startup-dev-redis-data
  dev_prometheus_data:
    driver: local
    name: agentic-startup-dev-prometheus-data
  dev_grafana_data:
    driver: local
    name: agentic-startup-dev-grafana-data
  dev_uploads:
    driver: local
    name: agentic-startup-dev-uploads
  dev_logs:
    driver: local
    name: agentic-startup-dev-logs
  frontend_node_modules:
    driver: local
    name: agentic-startup-frontend-node-modules
  test_coverage:
    driver: local
    name: agentic-startup-test-coverage
  test_results:
    driver: local
    name: agentic-startup-test-results
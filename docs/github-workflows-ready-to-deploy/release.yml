# Automated Release Workflow
# Creates releases based on semantic versioning

name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    permissions:
      contents: write
      packages: write
      pull-requests: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          pip install commitizen
          npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Release (Semantic)
        id: release
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual release with specified type
            cz bump --increment ${{ github.event.inputs.release_type }} --yes
          else
            # Automatic release based on commits
            cz bump --yes || echo "No release needed"
          fi
          
          # Check if a release was created
          if git describe --exact-match --tags HEAD >/dev/null 2>&1; then
            VERSION=$(git describe --exact-match --tags HEAD)
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "tag=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        if: steps.release.outputs.released == 'true'
        run: |
          cz changelog --dry-run > RELEASE_NOTES.md

      - name: Create GitHub Release
        if: steps.release.outputs.released == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          release_name: Release ${{ steps.release.outputs.tag }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  # Build and Publish Docker Images
  publish-images:
    name: Publish Container Images
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.released == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish Python Package (if applicable)
  publish-python:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.released == 'true'
    permissions:
      contents: read
      id-token: write  # For trusted publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # Uncomment if you want to publish to PyPI
        # with:
        #   password: ${{ secrets.PYPI_API_TOKEN }}

  # Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.outputs.released == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate documentation
        run: |
          pip install -r requirements-dev.txt
          # Add documentation generation commands here
          echo "Documentation generated for version ${{ needs.create-release.outputs.version }}"

      - name: Deploy documentation
        run: |
          echo "Documentation deployment would happen here"
          # This could deploy to GitHub Pages, Netlify, etc.

  # Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-images, publish-python, update-docs]
    if: needs.create-release.outputs.released == 'true'
    steps:
      - name: Notify release success
        run: |
          echo "🎉 Release ${{ needs.create-release.outputs.tag }} published successfully!"
          echo "Version: ${{ needs.create-release.outputs.version }}"
          # Add Slack/Discord/email notifications here
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🎉 Release ${{ needs.create-release.outputs.tag }} published!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Release Summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [create-release, publish-images, publish-python, update-docs]
    if: always()
    steps:
      - name: Generate release summary
        run: |
          echo "# Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.create-release.outputs.released }}" == "true" ]]; then
            echo "✅ **Release Created**: ${{ needs.create-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Container Images**: ${{ needs.publish-images.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Python Package**: ${{ needs.publish-python.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Documentation**: ${{ needs.update-docs.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **No release created** - no changes detected" >> $GITHUB_STEP_SUMMARY
          fi
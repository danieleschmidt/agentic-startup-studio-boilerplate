# Tox configuration for Agentic Startup Studio Boilerplate
# Test across multiple Python versions and environments

[tox]
envlist = 
    py39
    py310
    py311
    py312
    lint
    type
    security
    docs
    coverage
isolated_build = true
skip_missing_interpreters = true

[gh-actions]
# GitHub Actions Python version mapping
python =
    3.9: py39
    3.10: py310
    3.11: py311, lint, type, security, docs, coverage
    3.12: py312

[testenv]
# Base test environment configuration
deps = 
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements-dev.txt
    pytest>=7.0
    pytest-cov>=4.0
    pytest-xdist>=3.0
    pytest-mock>=3.0
    httpx>=0.24.0
extras = test
setenv =
    PYTHONPATH = {toxinidir}
    TESTING = true
    ENVIRONMENT = testing
    DATABASE_URL = sqlite:///./test.db
    REDIS_URL = redis://localhost:6379/1
commands = 
    pytest {posargs:tests/ --cov --cov-report=term-missing --cov-report=html --cov-report=xml}

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

[testenv:py312]
basepython = python3.12

[testenv:lint]
# Linting environment
basepython = python3.11
deps = 
    flake8>=6.0
    black>=23.0
    isort>=5.12
    pylint>=2.17
commands = 
    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    black --check --diff .
    isort --check-only --diff .
    pylint --rcfile=.pylintrc *.py

[testenv:type]
# Type checking environment
basepython = python3.11
deps = 
    mypy>=1.5
    types-requests
    types-PyYAML
    types-redis
    types-setuptools
commands = 
    mypy . --ignore-missing-imports --show-error-codes --strict

[testenv:security]
# Security scanning environment
basepython = python3.11
deps = 
    bandit>=1.7
    safety>=2.3
    pip-audit>=2.6
commands = 
    bandit -r . -f json -o bandit-report.json
    safety check --json --output safety-report.json
    pip-audit --format=json --output=pip-audit-report.json

[testenv:docs]
# Documentation building environment
basepython = python3.11
deps = 
    sphinx>=5.0
    sphinx-rtd-theme>=1.2
    sphinxcontrib-openapi>=0.8
commands = 
    sphinx-build -b html docs docs/_build/html
    sphinx-build -b linkcheck docs docs/_build/linkcheck

[testenv:coverage]
# Coverage reporting environment
basepython = python3.11
deps = 
    {[testenv]deps}
    coverage[toml]>=7.0
commands = 
    coverage erase
    coverage run -m pytest
    coverage report --show-missing --fail-under=80
    coverage html
    coverage xml

[testenv:performance]
# Performance testing environment
basepython = python3.11
deps = 
    {[testenv]deps}
    locust>=2.15
    pytest-benchmark>=4.0
commands = 
    pytest -m performance --benchmark-only --benchmark-sort=mean

[testenv:integration]
# Integration testing environment
basepython = python3.11
deps = 
    {[testenv]deps}
    docker>=6.0
    testcontainers>=3.7
setenv = 
    {[testenv]setenv}
    INTEGRATION_TESTS = true
commands = 
    pytest -m integration {posargs}

[testenv:e2e]
# End-to-end testing environment
basepython = python3.11
deps = 
    {[testenv]deps}
    playwright>=1.37
    pytest-playwright>=0.4
setenv = 
    {[testenv]setenv}
    E2E_TESTS = true
commands_pre = 
    playwright install
commands = 
    pytest -m e2e {posargs}

[testenv:clean]
# Clean up generated files
deps = 
skip_install = true
commands = 
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('test-results', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('*.egg-info', ignore_errors=True)"

[flake8]
# Flake8 configuration
max-line-length = 88
extend-ignore = E203, W503, E501
max-complexity = 10
exclude = 
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    .eggs,
    *.egg,
    build,
    dist,
    node_modules,
    frontend

[isort]
# isort configuration
profile = black
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[coverage:run]
# Coverage configuration (mirrors .coveragerc)
source = .
omit = 
    */tests/*
    */test_*
    */*_test.py
    */conftest.py
    */venv/*
    */.venv/*

[coverage:report]
# Coverage reporting
exclude_lines = 
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING: